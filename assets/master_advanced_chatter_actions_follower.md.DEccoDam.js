import{_ as o,c as a,o as t,ah as r}from"./chunks/framework.C2OYgiIb.js";const g=JSON.parse('{"title":"Overview","description":"","frontmatter":{},"headers":[],"relativePath":"master/advanced/chatter/actions/follower.md","filePath":"master/advanced/chatter/actions/follower.md","lastUpdated":1745823090000}'),i={name:"master/advanced/chatter/actions/follower.md"};function l(n,e,s,d,c,h){return t(),a("div",null,e[0]||(e[0]=[r('<h1 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h1><p>The <code>FollowerAction</code> class is a Filament action designed for adding followers to a record within the <strong>Webkul Chatter</strong> module. This action allows users to select multiple partners as followers, optionally send them notifications, and include a note in the notification email.</p><h2 id="key-features" tabindex="-1"><strong>Key Features</strong> <a class="header-anchor" href="#key-features" aria-label="Permalink to &quot;**Key Features**&quot;">​</a></h2><ol><li><strong>Adding Followers:</strong> Users can select multiple partners to add as followers to a record.</li><li><strong>Email Notification:</strong> Optionally notify newly added followers with a customizable email template.</li><li><strong>Rich Editor for Notes:</strong> If notifications are enabled, users can add a note that will be included in the email.</li><li><strong>Filament Integration:</strong> The action integrates smoothly with Filament’s UI components like <strong>Select</strong>, <strong>Toggle</strong>, and <strong>RichEditor</strong>.</li><li><strong>Customizable Email View:</strong> The email template for notifications can be set dynamically.</li><li><strong>Dynamic Resource URLs:</strong> Generates URLs for viewing the record within Filament.</li></ol><h2 id="class-properties" tabindex="-1"><strong>Class Properties</strong> <a class="header-anchor" href="#class-properties" aria-label="Permalink to &quot;**Class Properties**&quot;">​</a></h2><h3 id="_1-mailview" tabindex="-1">1. <code>$mailView</code> <a class="header-anchor" href="#_1-mailview" aria-label="Permalink to &quot;1. `$mailView`&quot;">​</a></h3><ul><li>Stores the view file path for the follower notification email.</li><li>Default: <code>&#39;chatter::mail.follower-mail&#39;</code></li></ul><h3 id="_2-resource" tabindex="-1">2. <code>$resource</code> <a class="header-anchor" href="#_2-resource" aria-label="Permalink to &quot;2. `$resource`&quot;">​</a></h3><ul><li>Stores the related resource class (e.g., TaskResource, ProjectResource).</li><li>Used to generate a link to the record in Filament.</li></ul><h2 id="methods" tabindex="-1"><strong>Methods</strong> <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;**Methods**&quot;">​</a></h2><h3 id="_1-setresource-string-resource-self" tabindex="-1"><strong>1. <code>setResource(string $resource): self</code></strong> <a class="header-anchor" href="#_1-setresource-string-resource-self" aria-label="Permalink to &quot;**1. `setResource(string $resource): self`**&quot;">​</a></h3><ul><li>Sets the associated Filament resource.</li><li>Used for generating URLs in emails.</li></ul><h3 id="_2-setfollowermailview-string-mailview-self" tabindex="-1"><strong>2. <code>setFollowerMailView(?string $mailView): self</code></strong> <a class="header-anchor" href="#_2-setfollowermailview-string-mailview-self" aria-label="Permalink to &quot;**2. `setFollowerMailView(?string $mailView): self`**&quot;">​</a></h3><ul><li>Updates the email template path dynamically.</li><li>Ensures the mail view is not empty before setting.</li></ul><h3 id="_3-getfollowermailview-string" tabindex="-1"><strong>3. <code>getFollowerMailView(): string</code></strong> <a class="header-anchor" href="#_3-getfollowermailview-string" aria-label="Permalink to &quot;**3. `getFollowerMailView(): string`**&quot;">​</a></h3><ul><li>Returns the configured email view file.</li></ul><h3 id="_4-getresource-string" tabindex="-1"><strong>4. <code>getResource(): string</code></strong> <a class="header-anchor" href="#_4-getresource-string" aria-label="Permalink to &quot;**4. `getResource(): string`**&quot;">​</a></h3><ul><li>Returns the resource class associated with the action.</li></ul><h2 id="filament-action-setup-setup-method" tabindex="-1"><strong>Filament Action Setup (<code>setUp</code> Method)</strong> <a class="header-anchor" href="#filament-action-setup-setup-method" aria-label="Permalink to &quot;**Filament Action Setup (`setUp` Method)**&quot;">​</a></h2><p>The <code>setUp</code> method defines how this action behaves in Filament.</p><h3 id="ui-and-behavior-configurations" tabindex="-1"><strong>UI and Behavior Configurations</strong> <a class="header-anchor" href="#ui-and-behavior-configurations" aria-label="Permalink to &quot;**UI and Behavior Configurations**&quot;">​</a></h3><ul><li><strong>Icon &amp; Tooltip:</strong> Uses <code>heroicon-s-user</code> for the button and <code>heroicon-s-user-plus</code> for the modal.</li><li><strong>Badge:</strong> Displays the count of current followers.</li><li><strong>Modal Size:</strong> Uses <code>MaxWidth::TwoExtraLarge</code> for a large modal.</li><li><strong>Slide Over Disabled:</strong> Uses a standard modal instead.</li></ul><h3 id="form-schema" tabindex="-1"><strong>Form Schema</strong> <a class="header-anchor" href="#form-schema" aria-label="Permalink to &quot;**Form Schema**&quot;">​</a></h3><ul><li><strong><code>Select::make(&#39;partners&#39;)</code></strong><ul><li>Allows users to select multiple partners to follow the record.</li><li>Uses a relationship-based selection (<code>followable</code> → <code>name</code>).</li><li>Supports search and preloading.</li></ul></li><li><strong><code>Toggle::make(&#39;notify&#39;)</code></strong><ul><li>Toggles whether the followers should be notified via email.</li></ul></li><li><strong><code>RichEditor::make(&#39;note&#39;)</code></strong><ul><li>Only visible if <code>notify</code> is enabled.</li><li>Supports basic text formatting and attachments.</li></ul></li></ul><h3 id="footer-content" tabindex="-1"><strong>Footer Content</strong> <a class="header-anchor" href="#footer-content" aria-label="Permalink to &quot;**Footer Content**&quot;">​</a></h3><ul><li>Uses a Blade view (<code>chatter::filament.actions.follower-action</code>) to customize the modal footer.</li></ul><h2 id="handling-the-action" tabindex="-1"><strong>Handling the Action</strong> <a class="header-anchor" href="#handling-the-action" aria-label="Permalink to &quot;**Handling the Action**&quot;">​</a></h2><p>When the action is triggered, the following happens:</p><ol><li>Retrieves the selected partners from the form.</li><li>Iterates through each partner: <ul><li>Adds them as a follower.</li><li>Sends an email if the <code>notify</code> toggle is enabled.</li></ul></li><li>Displays a <strong>success notification</strong> for each successfully added follower.</li><li>Catches any errors and logs them, displaying an <strong>error notification</strong> if needed.</li></ol><h2 id="email-notification-handling" tabindex="-1"><strong>Email Notification Handling</strong> <a class="header-anchor" href="#email-notification-handling" aria-label="Permalink to &quot;**Email Notification Handling**&quot;">​</a></h2><h3 id="_1-notifyfollower-model-record-partner-partner-array-data" tabindex="-1"><strong>1. <code>notifyFollower(Model $record, Partner $partner, array $data)</code></strong> <a class="header-anchor" href="#_1-notifyfollower-model-record-partner-partner-array-data" aria-label="Permalink to &quot;**1. `notifyFollower(Model $record, Partner $partner, array $data)`**&quot;">​</a></h3><ul><li>Uses the <code>EmailService</code> to send an email using the configured mail view.</li><li>Passes the <code>preparePayload</code> method’s output as the email data.</li></ul><h3 id="_2-prepareresourceurl-mixed-record-string" tabindex="-1"><strong>2. <code>prepareResourceUrl(mixed $record): string</code></strong> <a class="header-anchor" href="#_2-prepareresourceurl-mixed-record-string" aria-label="Permalink to &quot;**2. `prepareResourceUrl(mixed $record): string`**&quot;">​</a></h3><ul><li>Generates a URL to view the record in Filament.</li></ul><h3 id="_3-preparepayload-model-record-partner-partner-data-array" tabindex="-1"><strong>3. <code>preparePayload(Model $record, Partner $partner, $data): array</code></strong> <a class="header-anchor" href="#_3-preparepayload-model-record-partner-partner-data-array" aria-label="Permalink to &quot;**3. `preparePayload(Model $record, Partner $partner, $data): array`**&quot;">​</a></h3><ul><li>Builds the email payload with: <ul><li><strong>Record URL</strong></li><li><strong>Record Name</strong></li><li><strong>Model Name</strong></li><li><strong>Subject (Localized)</strong></li><li><strong>Note Content</strong></li><li><strong>Recipient’s Email &amp; Name</strong></li></ul></li></ul>',36)]))}const m=o(i,[["render",l]]);export{g as __pageData,m as default};
